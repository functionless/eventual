#!/usr/bin/env bash

set -ex

## start at the root of tests/aws-runtime
cd "$(dirname $0)/.."

npm cache clear --force
pnpm -r --filter @eventual/* exec npm link

# npm link wigs out when this is pnpm
unset npm_config_user_agent

mkdir -p ./.eventual
cd ./.eventual

##CDK
echo "Testing Create-Eventual with AWS CDK"

PROJECT_NAME="testme"
EVENTUAL_PACKAGES=("@eventual/core" "@eventual/core-runtime" "@eventual/aws-client" "@eventual/cli" "@eventual/client" "@eventual/aws-runtime" "@eventual/testing" "@eventual/compiler" "@eventual/integrations-slack" "@eventual/aws-cdk" "@eventual/timeline" "@eventual/project")

rm -rf $PROJECT_NAME
../../../../packages/create-eventual/bin/index.js $PROJECT_NAME --target aws-cdk --serviceName test-service
cd $PROJECT_NAME

# CDK doesn't like mis-matched versions...
cd ./infra
npm install aws-cdk@2.50 aws-cdk-lib@2.50 constructs@10.1.154

cd ..
npm link ${EVENTUAL_PACKAGES[@]}

npm run build
npm run synth

cd ../

## SST
echo "Testing Create-Eventual with AWS SST"

rm -rf $PROJECT_NAME
../../../../packages/create-eventual/bin/index.js $PROJECT_NAME --target sst --serviceName test-service

# sst's "build" also bootstraps and needs permissions to get parameters.
# There seems to be no good way to test the build/synth without network/account access :(.

# cd $PROJECT_NAME

# npm link ${EVENTUAL_PACKAGES[@]}

# npm run build -- --stage test