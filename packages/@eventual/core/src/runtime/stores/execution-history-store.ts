import { SortOrder } from "../../service-client.js";
import { WorkflowEvent } from "../../workflow-events.js";

/**
 * Store which contains all events generated by a workflow for the purpose of displaying them.
 *
 * Unlike {@link ExecutionHistoryStateStore}, this store may not contain all of the detailed
 * input and output of the events. However, it should contains all {@link WorkflowEvents} and not just
 * {@link HistoryStateEvent}s.
 */
export abstract class ExecutionHistoryStore {
  /**
   * Writes events as a batch into the execution history table.
   *
   * MUST be idempotent, but generally SHOULD expect only new events.
   */
  public abstract putEvents(
    executionId: string,
    events: WorkflowEvent[]
  ): Promise<void>;

  /**
   * Read an execution's events with pagination and filtering.
   */
  public abstract getEvents(
    request: ListExecutionEventsRequest
  ): Promise<ListExecutionEventsResponse>;
}

export interface ListExecutionEventsRequest {
  executionId: string;
  /**
   * @default "Asc"
   */
  sortDirection?: SortOrder;
  nextToken?: string;
  /**
   * @default: 100
   */
  maxResults?: number;
  /**
   * Start returning results after a date.
   */
  after?: string;
}

export interface ListExecutionEventsResponse {
  events: WorkflowEvent[];
  nextToken?: string;
}
