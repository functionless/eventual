export interface BaseEvent {
  type: WorkflowEventType;
  id: string;
  timestamp: string;
}

export interface HistoryEventBase extends BaseEvent {
  seq: number;
}

export enum WorkflowEventType {
  ActivityCompleted = "ActivityCompleted",
  ActivityFailed = "ActivityFailed",
  ActivityScheduled = "ActivityScheduled",
  WorkflowTaskCompleted = "TaskCompleted",
  WorkflowTaskStarted = "TaskStarted",
  WorkflowCompleted = "WorkflowCompleted",
  WorkflowFailed = "WorkflowFailed",
  WorkflowStarted = "WorkflowStarted",
}

export type HistoryEvent =
  | ActivityScheduled
  | ActivityCompleted
  | ActivityFailed;

/**
 * Events generated by the engine that represent the in-order state of the workflow.
 */
export type WorkflowEvent =
  | ActivityCompleted
  | ActivityFailed
  | ActivityScheduled
  | WorkflowTaskCompleted
  | WorkflowTaskStarted
  | WorkflowCompleted
  | WorkflowFailed
  | WorkflowStarted;

export interface WorkflowStarted extends BaseEvent {
  type: WorkflowEventType.WorkflowStarted;
  input: any;
}

export function isWorkflowStarted(
  event: WorkflowEvent
): event is WorkflowStarted {
  return event.type === WorkflowEventType.WorkflowStarted;
}

export interface WorkflowTaskStarted extends BaseEvent {
  type: WorkflowEventType.WorkflowTaskStarted;
}

export function isTaskStarted(
  event: WorkflowEvent
): event is WorkflowTaskStarted {
  return event.type === WorkflowEventType.WorkflowTaskStarted;
}

export interface ActivityScheduled extends HistoryEventBase {
  type: WorkflowEventType.ActivityScheduled;
  name: string;
}

export function isActivityScheduled(
  event: WorkflowEvent
): event is ActivityScheduled {
  return event.type === WorkflowEventType.ActivityScheduled;
}

export interface ActivityCompleted extends HistoryEventBase {
  type: WorkflowEventType.ActivityCompleted;
  result: any;
}

export function isActivityCompleted(
  event: WorkflowEvent
): event is ActivityCompleted {
  return event.type === WorkflowEventType.ActivityCompleted;
}

export interface ActivityFailed extends HistoryEventBase {
  type: WorkflowEventType.ActivityFailed;
  error: string;
  message: string;
}

export function isHistoryEvent(event: WorkflowEvent): event is HistoryEvent {
  return (
    isActivityCompleted(event) ||
    isActivityFailed(event) ||
    isActivityScheduled(event)
  );
}

export function isActivityFailed(
  event: WorkflowEvent
): event is ActivityFailed {
  return event.type === WorkflowEventType.ActivityFailed;
}

export interface WorkflowTaskCompleted extends BaseEvent {
  type: WorkflowEventType.WorkflowTaskCompleted;
}

export function isTaskCompleted(
  event: WorkflowEvent
): event is WorkflowTaskCompleted {
  return event.type === WorkflowEventType.WorkflowTaskCompleted;
}

export interface WorkflowCompleted extends BaseEvent {
  type: WorkflowEventType.WorkflowCompleted;
  output: any;
}

export function isWorkflowCompleted(
  event: WorkflowEvent
): event is WorkflowCompleted {
  return event.type === WorkflowEventType.WorkflowCompleted;
}

export interface WorkflowFailed extends BaseEvent {
  type: WorkflowEventType.WorkflowFailed;
  error: string;
  message: string;
}

export function isWorkflowFailed(
  event: WorkflowEvent
): event is WorkflowFailed {
  return event.type === WorkflowEventType.WorkflowFailed;
}

export function assertEventType<T extends WorkflowEvent>(
  event: any,
  type: T["type"]
): asserts event is T {
  if (!event || event.type !== type) {
    throw new Error(`Expected event of type ${type}`);
  }
}
