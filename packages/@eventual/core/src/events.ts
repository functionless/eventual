export interface BaseEvent {
  id: string;
  timestamp: string;
}

export interface AwaitableEvent extends BaseEvent {
  seq: number;
  threadId: number;
}

/**
 * Events generated by the engine that represent the in-order state of the workflow.
 */
export type Event =
  | WorkflowStartedEvent
  | WorkflowTaskStartedEvent
  | ActivityScheduledEvent
  | ActivityCompletedEvent
  | ActivityFailedEvent
  | WorkflowTaskCompletedEvent
  | WorkflowFailedEvent
  | WorkflowCompletedEvent;

export interface WorkflowStartedEvent extends BaseEvent {
  type: "WorkflowStartedEvent";
  input: any;
}

export function isWorkflowStartedEvent(
  event: Event
): event is WorkflowStartedEvent {
  return event && event.type === "WorkflowStartedEvent";
}

export interface WorkflowTaskStartedEvent extends BaseEvent {
  type: "WorkflowTaskStartedEvent";
}

export function isWorkflowTaskStartedEvent(
  event: Event
): event is WorkflowTaskStartedEvent {
  return event && event.type === "WorkflowTaskStartedEvent";
}

export interface ActivityScheduledEvent extends AwaitableEvent {
  type: "ActivityScheduledEvent";
  name: string;
  // TODO: including for debugging purposes, at scale should exclude or use references.
  args: any[];
}

export function isActivityScheduledEvent(
  event: Event
): event is ActivityScheduledEvent {
  return event && event.type === "ActivityScheduledEvent";
}

export interface ActivityCompletedEvent extends AwaitableEvent {
  type: "ActivityCompletedEvent";
  name: string;
  result: any;
}

export function isActivityCompletedEvent(
  event: Event
): event is ActivityCompletedEvent {
  return event && event.type === "ActivityCompletedEvent";
}

export interface ActivityFailedEvent extends AwaitableEvent {
  type: "ActivityFailedEvent";
  name: string;
  error: string;
  message: string;
}

export function isActivityFailedEvent(
  event: Event
): event is ActivityFailedEvent {
  return event && event.type === "ActivityFailedEvent";
}

export interface WorkflowTaskCompletedEvent extends BaseEvent {
  type: "WorkflowTaskCompletedEvent";
}

export function isWorkflowTaskCompletedEvent(
  event: Event
): event is WorkflowTaskCompletedEvent {
  return event && event.type === "WorkflowTaskCompletedEvent";
}

export interface WorkflowCompletedEvent extends BaseEvent {
  type: "WorkflowCompletedEvent";
  output: any;
}

export function isWorkflowCompletedEvent(
  event: Event
): event is WorkflowCompletedEvent {
  return event && event.type === "WorkflowCompletedEvent";
}

export interface WorkflowFailedEvent extends BaseEvent {
  type: "WorkflowFailedEvent";
  error: string;
  message: string;
}

export function isWorkflowFailedEvent(
  event: Event
): event is WorkflowFailedEvent {
  return event && event.type === "WorkflowFailedEvent";
}

export function isAwaitableEvent(
  event: Event
): event is Event & AwaitableEvent {
  return event && event.type && "threadId" in event;
}

export function assertEventType<T extends Event>(
  event: any,
  type: T["type"]
): asserts event is T {
  if (!event || event.type !== type) {
    throw new Error(`Expected event of type ${type}`);
  }
}
