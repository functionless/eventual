// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`api handlers should be decorated with source location 1`] = `
""use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

var command_worker_exports = {};
__export(command_worker_exports, {
  myHandler: () => myHandler,
  myHandler2: () => myHandler2
});
module.exports = __toCommonJS(command_worker_exports);

var CallKind;
(function(CallKind2) {
  CallKind2[CallKind2["AwaitTimerCall"] = 1] = "AwaitTimerCall";
  CallKind2[CallKind2["BucketCall"] = 10] = "BucketCall";
  CallKind2[CallKind2["ChildWorkflowCall"] = 7] = "ChildWorkflowCall";
  CallKind2[CallKind2["ConditionCall"] = 2] = "ConditionCall";
  CallKind2[CallKind2["EmitEventsCall"] = 4] = "EmitEventsCall";
  CallKind2[CallKind2["EntityCall"] = 8] = "EntityCall";
  CallKind2[CallKind2["ExpectSignalCall"] = 3] = "ExpectSignalCall";
  CallKind2[CallKind2["GetExecutionCall"] = 14] = "GetExecutionCall";
  CallKind2[CallKind2["InvokeTransactionCall"] = 9] = "InvokeTransactionCall";
  CallKind2[CallKind2["RegisterSignalHandlerCall"] = 5] = "RegisterSignalHandlerCall";
  CallKind2[CallKind2["SendSignalCall"] = 6] = "SendSignalCall";
  CallKind2[CallKind2["TaskCall"] = 0] = "TaskCall";
  CallKind2[CallKind2["TaskRequestCall"] = 12] = "TaskRequestCall";
  CallKind2[CallKind2["SearchCall"] = 11] = "SearchCall";
  CallKind2[CallKind2["StartWorkflowCall"] = 13] = "StartWorkflowCall";
})(CallKind || (CallKind = {}));

globalThis._eventual ??= { resources: {} };
function registerEventualResource(resourceKind, resource) {
  if (globalThis._eventual.resources[resourceKind]?.has(resource.name)) {
    throw new Error(\`\${resourceKind} with name '\${resource.name}' already exists\`);
  }
  (globalThis._eventual.resources[resourceKind] ??= /* @__PURE__ */ new Map()).set(resource.name, resource);
  return resource;
}

var PropertyKind;
(function(PropertyKind2) {
  PropertyKind2[PropertyKind2["BucketPhysicalName"] = 0] = "BucketPhysicalName";
  PropertyKind2[PropertyKind2["OpenSearchClient"] = 1] = "OpenSearchClient";
  PropertyKind2[PropertyKind2["ServiceClient"] = 2] = "ServiceClient";
  PropertyKind2[PropertyKind2["ServiceName"] = 3] = "ServiceName";
  PropertyKind2[PropertyKind2["ServiceSpec"] = 4] = "ServiceSpec";
  PropertyKind2[PropertyKind2["ServiceUrl"] = 5] = "ServiceUrl";
})(PropertyKind || (PropertyKind = {}));

function isSourceLocation(a) {
  return a && typeof a === "object" && typeof a.fileName === "string" && typeof a.exportName === "string";
}

var ServiceType;
(function(ServiceType2) {
  ServiceType2["CommandWorker"] = "CommandWorker";
  ServiceType2["Subscription"] = "Subscription";
  ServiceType2["OrchestratorWorker"] = "OrchestratorWorker";
  ServiceType2["EntityStreamWorker"] = "EntityStreamWorker";
  ServiceType2["BucketNotificationHandlerWorker"] = "BucketNotificationHandlerWorker";
  ServiceType2["TaskWorker"] = "TaskWorker";
  ServiceType2["TransactionWorker"] = "TransactionWorker";
})(ServiceType || (ServiceType = {}));

var SignalTargetType;
(function(SignalTargetType2) {
  SignalTargetType2[SignalTargetType2["Execution"] = 0] = "Execution";
  SignalTargetType2[SignalTargetType2["ChildExecution"] = 1] = "ChildExecution";
})(SignalTargetType || (SignalTargetType = {}));

var ExecutionStatus;
(function(ExecutionStatus2) {
  ExecutionStatus2["IN_PROGRESS"] = "IN_PROGRESS";
  ExecutionStatus2["SUCCEEDED"] = "SUCCEEDED";
  ExecutionStatus2["FAILED"] = "FAILED";
})(ExecutionStatus || (ExecutionStatus = {}));
var ExecutionStatuses = new Set(Object.values(ExecutionStatus));

function e({ base: t = "", routes: n = [] } = {}) {
  return { __proto__: new Proxy({}, { get: (e2, a, o) => (e3, ...r) => n.push([a.toUpperCase(), RegExp(\`^\${(t + e3).replace(/(\\/?)\\*/g, "($1.*)?").replace(/(\\/$)|((?<=\\/)\\/)/, "").replace(/:(\\w+)(\\?)?(\\.)?/g, "$2(?<$1>[^/]+)$2$3").replace(/\\.(?=[\\w(])/, "\\\\.").replace(/\\)\\.\\?\\(([^\\[]+)\\[\\^/g, "?)\\\\.?($1(?<=\\\\.)[^\\\\.")}/*$\`), r]) && o }), routes: n, async handle(e2, ...r) {
    let a, o, t2 = new URL(e2.url);
    e2.query = Object.fromEntries(t2.searchParams);
    for (var [p, s, u] of n)
      if ((p === e2.method || "ALL" === p) && (o = t2.pathname.match(s))) {
        e2.params = o.groups;
        for (var c of u)
          if (void 0 !== (a = await c(e2.proxy || e2, ...r)))
            return a;
      }
  } };
}
var itty_router_min_default = { Router: e };

function command(...args) {
  const [sourceLocation, name, options, handler] = parseCommandArgs(args);
  const command2 = {
    kind: "Command",
    name,
    handler,
    sourceLocation,
    ...options,
    output: options?.output ? "restStatusCode" in options.output ? options.output : { schema: options.output, description: "OK", restStatusCode: 200 } : { schema: void 0, description: "OK", restStatusCode: 200 }
  };
  return registerEventualResource("Command", command2);
}
function parseCommandArgs(args) {
  return [
    args.find(isSourceLocation),
    args.find((a) => typeof a === "string"),
    args.find((a) => typeof a === "object" && !isSourceLocation(a)),
    args.find((a) => typeof a === "function")
  ];
}

var router = itty_router_min_default.Router();
var api = createRouter([]);
function createRouter(middlewares) {
  return new Proxy({}, {
    get: (_, method) => {
      if (method === "routes" || method === "handle") {
        return router[method];
      } else if (method === "use") {
        return (middleware) => createRouter([...middlewares ?? [], middleware]);
      } else if (method === "command") {
        return (...args) => {
          const [sourceLocation, name, options, handler] = parseCommandArgs(args);
          return command(sourceLocation, name, {
            ...options ?? {},
            middlewares
          }, handler);
        };
      } else {
        return (...args) => {
          const [sourceLocation, path, routeProps, handler] = typeof args[0] === "object" ? typeof args[3] === "function" ? args : [
            args[0],
            args[1],
            void 0,
            args[2]
          ] : typeof args[2] === "function" ? [
            void 0,
            args[0],
            args[1],
            args[2]
          ] : [void 0, args[0], void 0, args[1]];
          const command2 = {
            description: routeProps?.description,
            kind: "Command",
            handler,
            memorySize: routeProps?.memorySize,
            method: method.toUpperCase(),
            name: path,
            path: typeof args[0] === "string" ? args[0] : args[1],
            sourceLocation,
            handlerTimeout: routeProps?.handlerTimeout,
            middlewares,
            otherOutputs: routeProps?.outputs,
            passThrough: true
          };
          registerEventualResource("Command", command2);
          return router[method](path, command2.handler);
        };
      }
    }
  });
}

var BaseHttpPayload = class {
  async tryJson() {
    try {
      return await this.json();
    } catch {
      return void 0;
    }
  }
  async json() {
    return JSON.parse(await this.text?.() ?? "");
  }
  async text() {
    if (this.body === void 0) {
      return "";
    } else if (typeof this.body === "string") {
      return this.body;
    } else if (Buffer.isBuffer(this.body)) {
      return this.body.toString("utf-8");
    } else {
      return Buffer.from((await readStream(this.body)).buffer).toString("utf-8");
    }
  }
  async arrayBuffer() {
    if (this.body === void 0) {
      return new ArrayBuffer(0);
    } else if (typeof this.body === "string") {
      return Buffer.from(this.body, "utf8");
    } else if (Buffer.isBuffer(this.body)) {
      return this.body;
    } else {
      return readStream(this.body);
    }
  }
};
var HttpResponse = class extends BaseHttpPayload {
  constructor(body, init) {
    super();
    this.body = body === void 0 ? null : body;
    this.status = init?.status ?? 200;
    this.statusText = init?.statusText;
    this.headers = toHeaders(init?.headers);
  }
};
function toHeaders(headers) {
  if (headers === void 0) {
    return new Headers();
  } else if (headers instanceof Headers) {
    return headers;
  } else {
    const h = new Headers();
    for (const [k, v] of Object.entries(headers)) {
      h.set(k, v);
    }
    return h;
  }
}
async function readStream(readable) {
  if (!readable) {
    return Buffer.from(new Uint8Array(0));
  }
  return new Promise((resolve, reject) => {
    const chunks = [];
    readable.on("error", reject);
    readable.on("data", (data) => {
      chunks.push(data);
    });
    readable.on("close", () => resolve(Buffer.concat(chunks)));
  });
}

var LogLevel;
(function(LogLevel2) {
  LogLevel2["TRACE"] = "TRACE";
  LogLevel2["DEBUG"] = "DEBUG";
  LogLevel2["INFO"] = "INFO";
  LogLevel2["WARN"] = "WARN";
  LogLevel2["ERROR"] = "ERROR";
})(LogLevel || (LogLevel = {}));
var LOG_LEVELS = Object.values(LogLevel);

var _BaseCachingSecret_value;
_BaseCachingSecret_value = /* @__PURE__ */ new WeakMap();

globalThis.getEventualHook ??= () => {
  throw new Error("Eventual Hook is not yet registered");
};
globalThis.tryGetEventualHook ??= () => {
  return void 0;
};

var ResultKind;
(function(ResultKind2) {
  ResultKind2[ResultKind2["Resolved"] = 0] = "Resolved";
  ResultKind2[ResultKind2["Failed"] = 1] = "Failed";
})(ResultKind || (ResultKind = {}));

globalThis.getEventualTaskRuntimeContext ??= () => {
  throw new Error("Eventual task context has not been registered yet.");
};

var myHandler = api.get("/", async () => {
  return new HttpResponse();
});
var myHandler2 = api.get("/", async () => {
  return new HttpResponse();
});
0 && (module.exports = {
  myHandler,
  myHandler2
});
"
`;
